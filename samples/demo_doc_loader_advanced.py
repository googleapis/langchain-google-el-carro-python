# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import json
import os

import sqlalchemy
from langchain_core.documents import Document
from sqlalchemy.dialects import oracle

from langchain_google_el_carro import ElCarroEngine
from langchain_google_el_carro.loader import ElCarroDocumentSaver, ElCarroLoader

db_host = os.environ["DB_HOST"]
db_port = int(os.environ["DB_PORT"])
db_name = os.environ["DB_NAME"]
db_user = os.environ["DB_USER"]
db_password = os.environ["DB_PASSWORD"]

elcarro_engine = ElCarroEngine.from_instance(
    db_host,
    db_port,
    db_name,
    db_user,
    db_password,
)

table_name = "my_doc_table"

# Part I. Custom table
print("Part I")
elcarro_engine.drop_document_table(table_name)

create_table_query = f"""CREATE TABLE {table_name} (
    fruit_id NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
    fruit_name VARCHAR2(100) NOT NULL,
    variety VARCHAR2(50),  
    quantity_in_stock NUMBER(10) NOT NULL,
    price_per_unit NUMBER(6,2) NOT NULL,
    organic NUMBER(3) NOT NULL
)"""
with elcarro_engine.connect() as conn:
    conn.execute(sqlalchemy.text(create_table_query))
    conn.commit()
    conn.execute(
        sqlalchemy.text(
            f"""
            INSERT INTO {table_name} 
            (fruit_name, variety, quantity_in_stock, price_per_unit, organic)
            VALUES ('Apple', 'Granny Smith', 150, 0.99, 1)
            """
        )
    )
    conn.execute(
        sqlalchemy.text(
            f"""
            INSERT INTO {table_name} 
            (fruit_name, variety, quantity_in_stock, price_per_unit, organic)
            VALUES ('Banana', 'Cavendish', 200, 0.59, 0)
            """
        )
    )
    conn.execute(
        sqlalchemy.text(
            f"""
            INSERT INTO {table_name} 
            (fruit_name, variety, quantity_in_stock, price_per_unit, organic)
            VALUES ('Orange', 'Navel', 80, 1.29, 1)
            """
        )
    )
    conn.commit()

loader = ElCarroLoader(elcarro_engine=elcarro_engine, table_name=table_name)

loaded_docs = loader.load()
print(f"Loaded Documents: [{loaded_docs}]")

loader = ElCarroLoader(
    elcarro_engine=elcarro_engine,
    table_name=table_name,
    content_columns=[
        "variety",
        "quantity_in_stock",
        "price_per_unit",
        "organic",
    ],
    metadata_columns=["fruit_id", "fruit_name"],
)
loaded_docs = loader.load()
print(f"Loaded Documents: [{loaded_docs}]")

print("Part II")

# Part II. Table created with init_document_table
elcarro_engine.drop_document_table(table_name)
elcarro_engine.init_document_table(
    table_name=table_name,
    metadata_columns=[
        sqlalchemy.Column("type", sqlalchemy.dialects.oracle.VARCHAR2(200)),
        sqlalchemy.Column("weight", sqlalchemy.INT),
    ],
    content_column="content",
    metadata_json_column="extra_json_metadata",
)

doc = Document(
    page_content="Banana",
    metadata={"type": "fruit", "weight": 100, "organic": 1},
)

print(f"Original Document: [{doc}]")

saver = ElCarroDocumentSaver(
    elcarro_engine=elcarro_engine,
    table_name=table_name,
    content_column="content",
    metadata_json_column="extra_json_metadata",
)
saver.add_documents([doc])

loader = ElCarroLoader(
    elcarro_engine=elcarro_engine,
    table_name=table_name,
    content_columns=["content"],
    metadata_columns=[
        "type",
        "weight",
    ],
    metadata_json_column="extra_json_metadata",
)

loaded_docs = loader.load()
print(f"Loaded Document: [{loaded_docs[0]}]")

saver.delete(loaded_docs)

# Add a new object with extra metadata to the database
metadata = json.dumps({"organic": 1, "shape": "round"})
with elcarro_engine.connect() as conn:
    conn.execute(
        sqlalchemy.text(
            f"""
                INSERT INTO {table_name} 
                (content, type, weight, extra_json_metadata)
                VALUES ('Apple', 'fruit', 150, '{metadata}')
                """
        )
    )
    conn.commit()

loaded_docs = loader.load()
print(f"Loaded Document for apple with extra shape metadata: [{loaded_docs[0]}]")

# Now let's use a query-based loader
loader = ElCarroLoader(
    elcarro_engine=elcarro_engine,
    query=f"""SELECT * FROM {table_name} WHERE 
        json_value(extra_json_metadata, '$.shape') = 'round'""",
    content_columns=["content"],
    metadata_columns=[
        "type",
        "weight",
    ],
    metadata_json_column="extra_json_metadata",
)
loaded_docs = loader.load()
print(f"Loaded Document for apple using query: [{loaded_docs[0]}]")

saver.delete(loaded_docs)
print(f"Documents left: {len(loader.load())}")

elcarro_engine.drop_document_table(table_name=table_name)
