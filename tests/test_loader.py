# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import json
import logging
import os
import random
import string
from typing import Generator

import pytest
import sqlalchemy
from langchain.text_splitter import CharacterTextSplitter
from langchain_core.documents import Document
from sqlalchemy.dialects import oracle

from langchain_google_el_carro import ElCarroEngine
from langchain_google_el_carro.loader import ElCarroDocumentSaver, ElCarroLoader

db_host = os.environ["DB_HOST"]
db_port = int(os.environ["DB_PORT"])
db_name = os.environ["DB_NAME"]
db_user = os.environ["DB_USER"]
db_password = os.environ["DB_PASSWORD"]

logging.basicConfig()
logging.getLogger("sqlalchemy.engine").setLevel(logging.INFO)


@pytest.fixture(name="elcarro_engine")
def elcarro_engine() -> Generator:
    elcarro_engine = ElCarroEngine.from_instance(
        db_host, db_port, db_name, db_user, db_password
    )
    yield elcarro_engine


@pytest.fixture(name="sample_table_1")
def sample_table_1(elcarro_engine: ElCarroEngine) -> Generator:
    random_suffix = "".join(random.choices(string.ascii_lowercase, k=6))
    table_name = f"doc_{random_suffix}"
    elcarro_engine.drop_document_table(table_name)

    create_table_query = f"""CREATE TABLE {table_name} (
            fruit_id NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
            fruit_name VARCHAR2(100) NOT NULL,
            variety VARCHAR2(50),  
            quantity_in_stock NUMBER(10) NOT NULL,
            price_per_unit NUMBER(6,2) NOT NULL,
            organic NUMBER(3) NOT NULL
        )"""
    with elcarro_engine.connect() as conn:
        conn.execute(sqlalchemy.text(create_table_query))
        conn.commit()

    yield table_name
    # Teardown
    elcarro_engine.drop_document_table(table_name)


# Simulate existing customer data table
# Check that both CLOB and VARCHAR types for storing JSON work


@pytest.fixture(name="sample_table_2_clob")
def sample_table_2_clob(elcarro_engine: ElCarroEngine) -> Generator:
    random_suffix = "".join(random.choices(string.ascii_lowercase, k=6))
    table_name = f"doc_{random_suffix}"
    elcarro_engine.drop_document_table(table_name)

    create_table_query = f"""CREATE TABLE {table_name} (
            fruit_id NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
            fruit_name VARCHAR2(100) NOT NULL,
            variety VARCHAR2(50),  
            quantity_in_stock NUMBER(10) NOT NULL,
            price_per_unit NUMBER(6,2) NOT NULL,
            langchain_metadata CLOB NOT NULL CONSTRAINT ensure_json_{table_name} CHECK (langchain_metadata IS JSON)
        )"""
    with elcarro_engine.connect() as conn:
        conn.execute(sqlalchemy.text(create_table_query))
        conn.commit()

    yield table_name
    # Teardown
    elcarro_engine.drop_document_table(table_name)


@pytest.fixture(name="sample_table_2_varchar")
def sample_table_2_varchar(elcarro_engine: ElCarroEngine) -> Generator:
    random_suffix = "".join(random.choices(string.ascii_lowercase, k=6))
    table_name = f"doc_{random_suffix}"
    elcarro_engine.drop_document_table(table_name)

    create_table_query = f"""CREATE TABLE {table_name} (
            fruit_id NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
            fruit_name VARCHAR2(100) NOT NULL,
            variety VARCHAR2(50),  
            quantity_in_stock NUMBER(10) NOT NULL,
            price_per_unit NUMBER(6,2) NOT NULL,
            langchain_metadata VARCHAR2(4000) NOT NULL CONSTRAINT ensure_json_{table_name} CHECK (langchain_metadata IS JSON)
        )"""
    with elcarro_engine.connect() as conn:
        conn.execute(sqlalchemy.text(create_table_query))
        conn.commit()

    yield table_name
    # Teardown
    elcarro_engine.drop_document_table(table_name)


# Generate random name but don't create a table
@pytest.fixture(name="custom_table")
def custom_table(elcarro_engine: ElCarroEngine) -> Generator:
    random_suffix = "".join(random.choices(string.ascii_lowercase, k=6))
    table_name = f"doc_{random_suffix}"
    elcarro_engine.drop_document_table(table_name)

    yield table_name
    # Teardown
    elcarro_engine.drop_document_table(table_name)


def test_load_from_sample_table_1(elcarro_engine: ElCarroEngine, sample_table_1: str):
    with elcarro_engine.connect() as conn:
        conn.execute(
            sqlalchemy.text(
                f"""
                INSERT INTO {sample_table_1} (fruit_name, variety, quantity_in_stock, price_per_unit, organic)
                VALUES ('Apple', 'Granny Smith', 150, 1, 1)
                """
            )
        )
        conn.commit()

    loader = ElCarroLoader(elcarro_engine, table_name=sample_table_1)
    documents = loader.load()
    assert documents == [
        Document(
            page_content="1",
            metadata={
                "fruit_name": "Apple",
                "variety": "Granny Smith",
                "quantity_in_stock": 150,
                "price_per_unit": 1,
                "organic": 1,
            },
        )
    ]


def test_load_from_sample_table_1_customized_content_customized_metadata(
    elcarro_engine: ElCarroEngine, sample_table_1: str
):
    with elcarro_engine.connect() as conn:
        conn.execute(
            sqlalchemy.text(
                f"""
                INSERT INTO {sample_table_1} (fruit_name, variety, quantity_in_stock, price_per_unit, organic)
                VALUES ('Apple', 'Granny Smith', 150, 0.99, 1)
                """
            )
        )
        conn.execute(
            sqlalchemy.text(
                f"""
                INSERT INTO {sample_table_1} (fruit_name, variety, quantity_in_stock, price_per_unit, organic)
                VALUES ('Banana', 'Cavendish', 200, 0.59, 0)
                """
            )
        )
        conn.execute(
            sqlalchemy.text(
                f"""
                INSERT INTO {sample_table_1} (fruit_name, variety, quantity_in_stock, price_per_unit, organic)
                VALUES ('Orange', 'Navel', 80, 1.29, 1)
                """
            )
        )
        conn.commit()

    loader = ElCarroLoader(
        elcarro_engine,
        table_name=sample_table_1,
        content_columns=[
            "fruit_name",
            "variety",
            "quantity_in_stock",
            "price_per_unit",
            "organic",
        ],
        metadata_columns=["fruit_id"],
    )
    documents = loader.load()
    assert documents == [
        Document(
            page_content="Apple Granny Smith 150 0.99 1",
            metadata={"fruit_id": 1},
        ),
        Document(
            page_content="Banana Cavendish 200 0.59 0",
            metadata={"fruit_id": 2},
        ),
        Document(
            page_content="Orange Navel 80 1.29 1",
            metadata={"fruit_id": 3},
        ),
    ]


def test_load_from_sample_table_1_customized_content_join(
    elcarro_engine: ElCarroEngine, sample_table_1: str
):
    with elcarro_engine.connect() as conn:
        conn.execute(
            sqlalchemy.text(
                f"""
                INSERT INTO {sample_table_1} (fruit_name, variety, quantity_in_stock, price_per_unit, organic)
                VALUES ('Apple', 'Granny Smith', 150, 0.99, 1)
                """
            )
        )
        conn.commit()

    loader = ElCarroLoader(
        elcarro_engine,
        table_name=sample_table_1,
        content_columns=[
            "variety",
            "quantity_in_stock",
            "price_per_unit",
        ],
    )
    documents = loader.load()
    assert documents == [
        Document(
            page_content="Granny Smith 150 0.99",
            metadata={
                "fruit_id": 1,
                "fruit_name": "Apple",
                "organic": 1,
            },
        ),
    ]


def test_load_from_sample_table_1_multiple_metadata(
    elcarro_engine: ElCarroEngine, sample_table_1: str
):
    with elcarro_engine.connect() as conn:
        conn.execute(
            sqlalchemy.text(
                f"""
                INSERT INTO {sample_table_1} (fruit_name, variety, quantity_in_stock, price_per_unit, organic)
                VALUES ('Apple', 'Granny Smith', 150, 0.99, 1)
                """
            )
        )
        conn.commit()

    loader = ElCarroLoader(
        elcarro_engine,
        table_name=sample_table_1,
        metadata_columns=[
            "fruit_name",
            "organic",
        ],
    )
    documents = loader.load()
    assert documents == [
        Document(
            page_content="1",
            metadata={
                "fruit_name": "Apple",
                "organic": 1,
            },
        ),
    ]


def test_load_from_sample_table_2_clob_langchain_metadata(
    elcarro_engine: ElCarroEngine, sample_table_2_clob: str
):
    metadata = json.dumps({"organic": 1})
    with elcarro_engine.connect() as conn:
        conn.execute(
            sqlalchemy.text(
                f"""
                INSERT INTO {sample_table_2_clob} (fruit_name, variety, quantity_in_stock, price_per_unit, langchain_metadata)
                VALUES ('Apple', 'Granny Smith', 150, 1, '{metadata}')
                """
            )
        )
        conn.commit()

    loader = ElCarroLoader(
        elcarro_engine,
        table_name=sample_table_2_clob,
        metadata_columns=[
            "fruit_name",
        ],
    )
    documents = loader.load()
    assert documents == [
        Document(
            page_content="1",
            metadata={
                "fruit_name": "Apple",
                "organic": 1,
            },
        ),
    ]


def test_load_from_sample_table_2_varchar_langchain_metadata(
    elcarro_engine: ElCarroEngine, sample_table_2_varchar: str
):
    metadata = json.dumps({"organic": 1})
    with elcarro_engine.connect() as conn:
        conn.execute(
            sqlalchemy.text(
                f"""
                INSERT INTO {sample_table_2_varchar} (fruit_name, variety, quantity_in_stock, price_per_unit, langchain_metadata)
                VALUES ('Apple', 'Granny Smith', 150, 1, '{metadata}')
                """
            )
        )
        conn.commit()

    loader = ElCarroLoader(
        elcarro_engine,
        table_name=sample_table_2_varchar,
        metadata_columns=[
            "fruit_name",
        ],
    )
    documents = loader.load()
    assert documents == [
        Document(
            page_content="1",
            metadata={
                "fruit_name": "Apple",
                "organic": 1,
            },
        ),
    ]


def test_save_doc_with_default_metadata(
    elcarro_engine: ElCarroEngine, custom_table: str
):
    elcarro_engine.init_document_table(custom_table)
    test_docs = [
        Document(
            page_content="Apple Granny Smith 150 0.99 1",
            metadata={"a": 1, "b": 2},
        ),
        Document(
            page_content="Banana Cavendish 200 0.59 0",
            metadata={"b": 3, "a": 2},
        ),
        Document(
            page_content="Orange Navel 80 1.29 1",
            metadata={"fruit_id": 3},
        ),
    ]
    saver = ElCarroDocumentSaver(elcarro_engine=elcarro_engine, table_name=custom_table)
    loader = ElCarroLoader(elcarro_engine=elcarro_engine, table_name=custom_table)

    saver.add_documents(test_docs)
    docs = loader.load()

    assert docs == test_docs

    metadata = sqlalchemy.MetaData()
    sqlalchemy.MetaData.reflect(
        metadata, bind=elcarro_engine.connect(), only=[custom_table]
    )
    assert metadata.tables[custom_table].columns.keys() == [
        "page_content",
        "langchain_metadata",
    ]


@pytest.mark.parametrize("metadata_json_column", [None, "metadata_testcolumn"])
def test_save_doc_with_customized_metadata(
    elcarro_engine: ElCarroEngine,
    custom_table: str,
    metadata_json_column: str,
):
    content_column = "content_col_test"
    elcarro_engine.init_document_table(
        table_name=custom_table,
        metadata_columns=[
            sqlalchemy.Column("fruit_name", sqlalchemy.dialects.oracle.CLOB),
            sqlalchemy.Column(
                "organic",
                sqlalchemy.INT,
            ),
        ],
        content_column="content_col_test",
        metadata_json_column=metadata_json_column,
    )
    test_docs = [
        Document(
            page_content="Granny Smith 150 0.99",
            metadata={"fruit_id": 1, "fruit_name": "Apple", "organic": 1},
        ),
    ]
    saver = ElCarroDocumentSaver(
        elcarro_engine=elcarro_engine,
        table_name=custom_table,
        content_column=content_column,
        metadata_json_column=(metadata_json_column if metadata_json_column else None),
    )
    loader = ElCarroLoader(
        elcarro_engine=elcarro_engine,
        table_name=custom_table,
        content_columns=[content_column],
        metadata_columns=[
            "fruit_name",
            "organic",
        ],
        metadata_json_column=(metadata_json_column if metadata_json_column else None),
    )

    saver.add_documents(test_docs)
    docs = loader.load()

    if metadata_json_column:
        assert docs == test_docs
        metadata = sqlalchemy.MetaData()
        sqlalchemy.MetaData.reflect(
            metadata, bind=elcarro_engine.connect(), only=[custom_table]
        )
        assert metadata.tables[custom_table].columns.keys() == [
            content_column,
            "fruit_name",
            "organic",
            metadata_json_column,
        ]
    else:
        assert docs == [
            Document(
                page_content="Granny Smith 150 0.99",
                metadata={"fruit_name": "Apple", "organic": 1},
            ),
        ]
        metadata = sqlalchemy.MetaData()
        sqlalchemy.MetaData.reflect(
            metadata, bind=elcarro_engine.connect(), only=[custom_table]
        )
        assert metadata.tables[custom_table].columns.keys() == [
            content_column,
            "fruit_name",
            "organic",
        ]


def test_save_doc_without_metadata(elcarro_engine: ElCarroEngine, custom_table: str):
    elcarro_engine.init_document_table(
        custom_table,
        metadata_json_column=None,
    )
    test_docs = [
        Document(
            page_content="Granny Smith 150 0.99",
            metadata={"fruit_id": 1, "fruit_name": "Apple", "organic": 1},
        ),
    ]
    saver = ElCarroDocumentSaver(elcarro_engine=elcarro_engine, table_name=custom_table)
    loader = ElCarroLoader(
        elcarro_engine=elcarro_engine,
        table_name=custom_table,
    )

    saver.add_documents(test_docs)
    docs = loader.load()

    assert docs == [
        Document(
            page_content="Granny Smith 150 0.99",
            metadata={},
        ),
    ]
    metadata = sqlalchemy.MetaData()
    sqlalchemy.MetaData.reflect(
        metadata, bind=elcarro_engine.connect(), only=[custom_table]
    )
    assert metadata.tables[custom_table].columns.keys() == [
        "page_content",
    ]


def test_delete_doc_with_default_metadata(
    elcarro_engine: ElCarroEngine, custom_table: str
):
    elcarro_engine.init_document_table(custom_table)
    test_docs = [
        Document(
            page_content="Apple Granny Smith 150 0.99 1",
            metadata={"fruit_id": 1},
        ),
        Document(
            page_content="Banana Cavendish 200 0.59 0 1",
            metadata={"fruit_id": 2},
        ),
    ]
    saver = ElCarroDocumentSaver(elcarro_engine=elcarro_engine, table_name=custom_table)
    loader = ElCarroLoader(
        elcarro_engine=elcarro_engine,
        table_name=custom_table,
    )

    saver.add_documents(test_docs)
    docs = loader.load()
    assert docs == test_docs

    saver.delete(docs[:1])
    assert len(loader.load()) == 1

    saver.delete(docs)
    assert len(loader.load()) == 0


@pytest.mark.parametrize("metadata_json_column", [None, "metadata_col_test"])
def test_delete_doc_with_customized_metadata(
    elcarro_engine: ElCarroEngine, custom_table: str, metadata_json_column: str
):
    content_column = "content_col_test"
    elcarro_engine.init_document_table(
        custom_table,
        metadata_columns=[
            sqlalchemy.Column("fruit_name", sqlalchemy.dialects.oracle.VARCHAR2(4000)),
            sqlalchemy.Column("organic", sqlalchemy.INT),
        ],
        content_column=content_column,
        metadata_json_column=metadata_json_column,
    )
    test_docs = [
        Document(
            page_content="Granny Smith 150 0.99",
            metadata={"fruit-id": 1, "fruit_name": "Apple", "organic": 1},
        ),
        Document(
            page_content="Cavendish 200 0.59 0",
            metadata={"fruit_id": 2, "fruit_name": "Banana", "organic": 1},
        ),
    ]
    saver = ElCarroDocumentSaver(
        elcarro_engine=elcarro_engine,
        table_name=custom_table,
        content_column="content_col_test",
        metadata_json_column=metadata_json_column,
    )
    loader = ElCarroLoader(
        elcarro_engine=elcarro_engine,
        table_name=custom_table,
        content_columns=["content_col_test"],
        metadata_json_column=metadata_json_column,
    )

    saver.add_documents(test_docs)
    docs = loader.load()
    assert len(docs) == 2

    saver.delete(docs[:1])
    assert len(loader.load()) == 1

    saver.delete(docs)
    assert len(loader.load()) == 0


@pytest.mark.parametrize("metadata_json_column", [None, "extra_metadata_column"])
def test_delete_doc_with_customized_metadata_advanced(
    elcarro_engine: ElCarroEngine,
    custom_table: str,
    metadata_json_column: str,
):
    elcarro_engine.init_document_table(
        custom_table,
        metadata_columns=[
            sqlalchemy.Column("fruit_name", sqlalchemy.dialects.oracle.VARCHAR2(4000)),
            sqlalchemy.Column("organic", sqlalchemy.INT),
        ],
        content_column="content_col_test",
        metadata_json_column=metadata_json_column,
    )
    test_docs = [
        Document(
            page_content="Granny Smith 150 0.99",
            metadata={"fruit-id": 1, "fruit_name": "Apple", "organic": 1, "extra": 1},
        ),
        Document(
            page_content="Granny Smith 150 0.99",
            metadata={"fruit-id": 2, "fruit_name": "Apple", "organic": 1, "extra": 3},
        ),
        Document(
            page_content="Cavendish 200 0.59 0",
            metadata={"extra": 2, "organic": 1, "fruit_id": 2, "fruit_name": "Banana"},
        ),
    ]
    saver = ElCarroDocumentSaver(
        elcarro_engine=elcarro_engine,
        table_name=custom_table,
        content_column="content_col_test",
        metadata_json_column=metadata_json_column,
    )
    loader = ElCarroLoader(
        elcarro_engine=elcarro_engine,
        table_name=custom_table,
        content_columns=["content_col_test"],
        metadata_json_column=metadata_json_column,
    )

    saver.add_documents(test_docs)
    assert len(loader.load()) == 3

    # Should delete 2 entries
    saver.delete(
        [
            Document(
                page_content="Granny Smith 150 0.99",
            )
        ]
    )
    assert len(loader.load()) == 1
    saver.delete(test_docs)
    assert len(loader.load()) == 0

    # Add everything back
    saver.add_documents(test_docs)

    # Matching a subset of fields, which are in table columns, should delete 2 entries
    saver.delete(
        [
            Document(
                page_content="Granny Smith 150 0.99",
                metadata={
                    "fruit_name": "Apple",
                },
            )
        ]
    )
    assert len(loader.load()) == 1
    saver.delete(test_docs)
    assert len(loader.load()) == 0

    # Matching a subset of fields, which are in JSON metadata,
    # should delete 2 entries without metadata field, and 1 entry with metadata field

    # Add everything back
    saver.add_documents(test_docs)
    saver.delete(
        [
            Document(
                page_content="Granny Smith 150 0.99",
                metadata={
                    "fruit-id": 1,
                },
            )
        ]
    )
    if metadata_json_column:
        assert len(loader.load()) == 2
    else:
        assert len(loader.load()) == 1
    saver.delete(test_docs)
    assert len(loader.load()) == 0

    # Add everything back
    saver.add_documents(test_docs)

    # Adding extra-field
    # should delete 2 entries without metadata field, and no entries with metadata field
    saver.delete(
        [
            Document(
                page_content="Granny Smith 150 0.99",
                metadata={
                    "extra": 1,
                    "fruit-id": 1,
                    "fruit_name": "Apple",
                    "organic": 1,
                    "extra-field": 1,
                },
            )
        ]
    )
    if metadata_json_column:
        assert len(loader.load()) == 3
    else:
        assert len(loader.load()) == 1
    saver.delete(test_docs)
    assert len(loader.load()) == 0

    # Non-existent fruit-id
    # should delete 2 entries without metadata field, and no entries with metadata field

    # Add everything back
    saver.add_documents(test_docs)
    saver.delete(
        [
            Document(
                page_content="Granny Smith 150 0.99",
                metadata={
                    "fruit-id": 10,
                },
            )
        ]
    )
    if metadata_json_column:
        assert len(loader.load()) == 3
    else:
        assert len(loader.load()) == 1
    saver.delete(test_docs)
    assert len(loader.load()) == 0


def test_delete_doc_with_query(elcarro_engine: ElCarroEngine, custom_table: str):
    elcarro_engine.init_document_table(
        custom_table,
        metadata_columns=[
            sqlalchemy.Column("fruit_name", sqlalchemy.dialects.oracle.VARCHAR2(4000)),
            sqlalchemy.Column("organic", sqlalchemy.INT),
        ],
    )
    test_docs = [
        Document(
            page_content="Granny Smith 150 0.99",
            metadata={"fruit-id": 1, "fruit_name": "Apple", "organic": 1},
        ),
        Document(
            page_content="Cavendish 200 0.59 0",
            metadata={"fruit_id": 2, "fruit_name": "Banana", "organic": 0},
        ),
        Document(
            page_content="Navel 80 1.29 1",
            metadata={"fruit_id": 3, "fruit_name": "Orange", "organic": 1},
        ),
    ]
    saver = ElCarroDocumentSaver(elcarro_engine=elcarro_engine, table_name=custom_table)
    loader = ElCarroLoader(
        elcarro_engine=elcarro_engine,
        table_name=custom_table,
    )
    query = f"select * from {custom_table} where fruit_name='Apple'"
    query_loader = ElCarroLoader(elcarro_engine=elcarro_engine, query=query)

    saver.add_documents(test_docs)
    docs = query_loader.load()
    assert len(docs) == 1

    saver.delete(docs)
    assert len(loader.load()) == 2


def test_load_and_spilt(elcarro_engine: ElCarroEngine, custom_table: str):
    elcarro_engine.init_document_table(custom_table)
    text_splitter = CharacterTextSplitter(
        separator=" ",
        chunk_size=10,
        chunk_overlap=2,
        length_function=len,
        is_separator_regex=False,
    )
    test_docs = [
        Document(
            page_content="Apple Granny Smith 150 0.99 1",
            metadata={"fruit_id": 1},
        ),
    ]
    saver = ElCarroDocumentSaver(elcarro_engine=elcarro_engine, table_name=custom_table)
    loader = ElCarroLoader(
        elcarro_engine=elcarro_engine,
        table_name=custom_table,
    )

    saver.add_documents(test_docs)
    docs = loader.load_and_split(text_splitter=text_splitter)

    assert len(docs) == 4
